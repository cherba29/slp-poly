#ifndef NTRP_MAPLE_SCANNER_H
#define NTRP_MAPLE_SCANNER_H

/**
 * @file Scanner.h Definition of maple::Scanner class
 */

// Flex expects the signature of yylex to be defined in the macro YY_DECL, and
// the C++ parser expects it to be declared. We can factor both as follows.

#ifndef YY_DECL

#define YY_DECL                                  \
  maple::Parser::token_type maple::Scanner::lex( \
      maple::Parser::semantic_type* yylval,      \
      maple::Parser::location_type* yylloc, maple::Driver& driver)

#endif

#include "context/maple/Parser.hpp"

#ifndef __FLEX_LEXER_H
#define yyFlexLexer MapleFlexLexer
#include "FlexLexer.h"
#undef yyFlexLexer
#endif

namespace maple {

/**
 * Scanner is a derived class to add some extra function to the scanner
 * class. Flex itself creates a class named yyFlexLexer, which is renamed using
 * macros to ExampleFlexLexer. However we change the context of the generated
 * yylex() function to be contained within the Scanner class. This is required
 * because the yylex() defined in ExampleFlexLexer has no parameters.
 */
class Scanner : public MapleFlexLexer {
 public:
  /**
   * Create a new scanner object. The streams arg_yyin and arg_yyout default
   * to cin and cout, but that assignment is only made when initializing in
   * yylex().
   */
  Scanner(std::istream* arg_yyin = 0, std::ostream* arg_yyout = 0)
      : MapleFlexLexer(arg_yyin, arg_yyout) {}

  /** Required for virtual functions */
  virtual ~Scanner() {}

  /**
   * This is the main lexing function. It is generated by flex according to
   * the macro declaration YY_DECL above. The generated bison parser then
   * calls this virtual function to fetch new tokens. */
  virtual Parser::token_type lex(Parser::semantic_type* yylval,
                                 Parser::location_type* yylloc,
                                 class maple::Driver& driver);

  /** Enable debug output (via arg_yyout) if compiled into the scanner. */
  void set_debug(bool b) { yy_flex_debug = b; }
};

}  // namespace maple

#endif  // NTRP_MAPLE_SCANNER_H
